img = cv.imread('messi.jpeg')
img_rgb = img[:,:,::-1]
avgBlur = cv.blur(img_rgb,(5,5))
boxFilter = cv.boxFilter(img_rgb, -1, (5, 5))  # Box Filter for smoothing
images = [img_rgb, avgBlur, gaussianBlur, medianBlur, bilateralFilter, boxFilter]
titles = ['Original', 'Average Blur', 'Box Filter']
plt.figure(figsize=(12, 8))
for i in range(len(images)):
    plt.subplot(2, 3, i + 1)
    plt.title(titles[i])
    plt.imshow(images[i])
    plt.axis('off')  # Hide axes

plt.tight_layout()
plt.show()


#### Both above and below work

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import structural_similarity as ssim

# Load and convert the image to RGB
image = cv2.imread('fruit.jpg')
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Define and apply kernels
blurred = cv2.filter2D(image_rgb, -1, np.ones((9, 9), np.float32) / 81)
smoothed = cv2.filter2D(image_rgb, -1, np.array([[2, 2, 2], [2, 10, 2], [2, 2, 2]], np.float32) / 18)

# Convert to grayscale for SSIM
gray = lambda img: cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
ssim_blurred = ssim(gray(image_rgb), gray(blurred))
ssim_smoothed = ssim(gray(image_rgb), gray(smoothed))

# Print SSIM values
print(f'SSIM between original and blurred images: {ssim_blurred:.4f}')
print(f'SSIM between original and smoothed images: {ssim_smoothed:.4f}')

# Plot images
titles = ['Original Image', 'Blurred Image', 'Smoothed Image']
images = [image_rgb, blurred, smoothed]
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for ax, img, title in zip(axs, images, titles):
    ax.imshow(img)
    ax.set_title(title)
    ax.axis('off')

plt.tight_layout()
plt.show()
